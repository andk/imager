                         *** TODO ***


Iolayer:
- Add scalar/mmap to iolayer
- Add close() code to iolayer for fakeseek sources.
- Merge callback interface into iolayer
- Add iolayer reading/writing for gif
- and raw
- Implment the maxread threshold (Indicates how much can
  be read from a source before it stops reading from its
  underlying source.  For making sure only the relevant
  data is read from a socket for example. 


Enhanched internal structure:

MultiImage & metadata support:
- Figure what interface should be between C and perl?
- How to store data in the C interface for tags/metadata?
  Support tiff's madness, i.e. tags and options.
- Error handling, make a general i_errstr object and arrange
  such that each image has an i_errstr object to hold its
  local errors?
- SEE design/represent.txt for proposed new structure and
  interface design that takes these factors into account.
- define common i_* tags for specifying attribute common among images
  like spatial resolution (implement for other image types, especially 
  TIFF)  (Spatial resolution is supported for all types that support 
  it - are there any other common properties we can add?)
  

New Features:
- Add mng support, pcx and aalib support.
  - Windows icon files (.ico)
  - ILBM (Amiga) images
  - photoshop files (I think I've seen docs)
  - XBM
  - FITS
  - WMF (extract bitmap data on read)
  - gzip or bzip2 compressed raw
  - postscript for output

- Transforms, interpolated multidimensional lookup tables.
  Usefull for CMYK <-> RGB table lookup.

- advanced font layout (spacing, kerning, alignment) (Artur?)

- ways to check if characters are present in a font, eg. checking if
  ligatures are present

- font synthesis - synthesize a bold or slanted font from a normal font
  (or even from an existing bold or slanted font)

- utf8 support for text output
  (available for freetype2)

- image rotation, 3 ways of doing rotation:
  - rotation by shearing, which produces makes lengths in the image larger,
    but could be useful
  (2 of the 3 have been done)

- read_multi() needs to handle other multi-image types, such as TIFF 
  (probably the most common)

- write_multi() to save other multi-image types, especially TIFF

- compose channels - build a new image based on channels from several
  images

- filled polygons

- arc outlines

Clean up:
- Make sure everything is doable with the OO interface
  i_flood_fill() for example.

- Compile with memory debugging enabled and fix all leaks

- dynaload.c is strongly tied to perl

- Add mycalloc() memory allocation wrappers.

- should we overload <=> or cmp for Imager::Color objects?
  too many worms, leave it out

- should the interlace option for reading raw images have 
  symbolic names in the OO interface?

- improve consistency in the interfaces, both in trying to use named
  parameters where possible but also in using consistent names, eg.
  (tx, ty) vs (left, top) in rubthrough() vs paste().  Do we want a (simple)
  standard for this (suggested names)?  Remember to preserve the old 
  interface where possible.

Format specific issues:
- provide patches for libgif and libungif that fix their bugs
  and give a useful extension interface.  Probe for the 
  installation of the patches in Makefile.PL to let gif.c
  know what features it can use.

- Add options for pnm writer to save in any of the p1..P6
  formats.  Even if the input has 1 channel, write 3 and such
  cases.  Also allow ascii mode.  Need to be able to write 
  pbm images which needs ties to the quantization code.

- save paletted images as paletted where that's supported.  Done
  for gif/tga/bmp/tiff.  Not done for png yet.

- read other format paletted images as paletted images.  This has 
  been done for gif/tga/bmp/tiff formats but not for png.

- read/write 16-bit/sample images as such for tiff

Documentation:
- Add to the documentation
- Write a tutorial?
- sample code and Imager/Samples.pod describing them
- Imager/Cookbook.pod
- modify the .pm files to put pod describing a function close to the 
  function
- Write a guide to installing the helper libraries
- Go through the entire project and add comments in pod
  so doco.perl can be used to read them.
