=head1 NAME

Imager::Draw - Draw primitives to images

=head1 SYNOPSIS

  use Imager;
  use Imager::Fill;

  $img = ...;
  $blue = Imager::Color->new( 0, 0, 255 );
  $fill = Imager::Fill->new(hatch=>'stipple');

  $img->line(color=>$blue, x1=>10, x2=>100,
                           y1=>20, y2=>50, aa=>1, endp=>1 );

  $img->polyline(points=>[[$x0,$y0], [$x1,$y1], [$x2,$y2]],
                 color=>$blue);
  $img->polyline(x=>[$x0,$x1,$x2], y=>[$y0,$y1,$y2], aa=>1);

  $img->box(color=> $blue, xmin=> 10, ymin=>30,
                           xmax=>200, ymax=>300, filled=>1);
  $img->box(fill=>$fill);

  $img->arc(color=>$blue, r=>20, x=>200, y=>100,
            d1=>10, d2=>20 );

  $img->circle(color=>$blue, r=>50, x=>200, y=>100);

  $img->polygon(points=>[[$x0,$y0], [$x1,$y1], [$x2,$y2]], 
                color=>$blue);

  $img->polygon(x=>[$x0,$x1,$x2], y=>[$y0,$y1,$y2]);
  
  $img->flood_fill(x=>50, y=>50, color=>$color);

  $img->setpixel(x=>50, y=>70, color=>$color);

  $img->setpixel(x=>[ 50, 60, 70 ], y=>[20, 30, 40], color=>$color);

  my $color = $img->getpixel(x=>50, y=>70);

  my @colors = $img->getpixel(x=>[ 50, 60, 70 ], y=>[20, 30, 40]);

  # low-level functions
  my @colors = $img->getscanline(y=>50, x=>10, width=>20);
  
  $img->setscanline(y=>60, x=>20, pixels=>\@colors);

  my @samples = $img->getsamples(y=>50, x=>10, width=>20, 
                                 channels=>[ 2, 0 ]);

=head1 DESCRIPTION

It is possible to draw with graphics primitives onto images.  Such
primitives include boxes, arcs, circles, polygons and lines.  The
coordinate system in Imager has the origin C<(0,0)> in the upper left
corner of an image.  For non antialiasing operation all coordinates are 
rounded towards the nearest integer.  For antialiased operations floating
point coordinates are used.

Drawing is assumed to take place in a coordinate system of infinite
resolution.  This is the typical convention and really only matters when
it is necessary to check for off-by-one cases.  Typically it's usefull to 
think of C<(10, 20)> as C<(10.00, 20.00)> and consider the consiquences.

The C<color> parameter for any of the drawing methods can be an
L<Imager::Color> object, a simple scalar that Imager::Color can
understand, a hashref of parameters that Imager::Color->new
understands, or an arrayref of red, green, blue values, for example:

  $image->box(..., color=>'red');
  $image->line(..., color=>'#FF0000');
  $image->flood_fill(..., color=>[ 255, 0, 255 ]);

All filled primitives, i.e. C<arc()>, C<box()>, C<circle()>,
C<polygon()> and the C<flood_fill()> method can take a C<fill>
parameter instead of a C<color> parameter which can either be an
Imager::Fill object, or a reference to a hash containing the
parameters used to create the fill, for example:

  $image->box(..., fill=>{ hatch => 'check1x1' });
  my $fillimage = Imager->new;
  $fillimage->read(file=>$somefile) or die;
  $image->flood_fill(..., fill=>{ image=>$fillimage });

Currently you can create opaque or transparent plain color fills,
hatched fills, image based fills and fountain fills.  See
L<Imager::Fill> for more information.

=head2 List of primitives

=over

=item line

  $img->line(color=>$green, x1=>10, x2=>100,
                            y1=>20, y2=>50, aa=>1, endp=>1 );

Draws a line from (x1,y1) to (x2,y2).  The endpoint (x2,y2) is drawn
by default.  If endp of 0 is specified then the endpoint will not be
drawn.  If C<aa> is set then the line will be drawn antialiased.  The
I<antialias> parameter is still available for backwards compatibility.

=item polyline

  $img->polyline(points=>[[$x0,$y0],[$x1,$y1],[$x2,$y2]],color=>$red);
  $img->polyline(x=>[$x0,$x1,$x2], y=>[$y0,$y1,$y2], aa=>1);

Polyline is used to draw multilple lines between a series of points.
The point set can either be specified as an arrayref to an array of
array references (where each such array represents a point).  The
other way is to specify two array references.

The I<antialias> parameter is still available for backwards compatibility.

=item box

  $blue = Imager::Color->new( 0, 0, 255 );
  $img->box(color => $blue, xmin=>10, ymin=>30, xmax=>200, ymax=>300, 
            filled=>1);

If any of the edges of the box are ommited it will snap to the outer
edge of the image in that direction.  If C<filled> is ommited the box
is drawn as an outline.  Instead of a color it is possible to use a C<fill>
pattern:

  $fill = Imager::Fill->new(hatch=>'stipple');
  $img->box(fill=>$fill);  # fill entire image with a given fill pattern

  $img->box(xmin=>10, ymin=>30, xmax=>150, ymax=>60,
            fill => { hatch=>'cross2' });

Also if a color is omitted a color with (255,255,255,255) is used
instead.  [NOTE: This may change to use C<$img-E<gt>fgcolor()> in the future].

Box does not support fractional coordinates yet.

=item arc

  $img->arc(color=>$red, r=>20, x=>200, y=>100, d1=>10, d2=>20 );

This creates a filled red arc with a 'center' at (200, 100) and spans
10 degrees and the slice has a radius of 20. [NOTE: arc has a BUG in
it right now for large differences in angles.]
It's also possible to supply a C<fill> parameter.

=item circle

  $img->circle(color=>$green, r=>50, x=>200, y=>100, aa=>1);

This creates an antialiased green circle with its center at (200, 100)
and has a radius of 50.  It's also possible to supply a C<fill> parameter
instead of a color parameter.

The circle is always filled but that might change, so always pass a 
filled=>1 parameter if you want it to be filled.


=item polygon

  $img->polygon(points=>[[$x0,$y0],[$x1,$y1],[$x2,$y2]],color=>$red);
  $img->polygon(x=>[$x0,$x1,$x2], y=>[$y0,$y1,$y2], fill=>$fill);

Polygon is used to draw a filled polygon.  Currently the polygon is
always drawn antialiased, although that will change in the future.
Like other antialiased drawing functions its coordinates can be
specified with floating point values.  As with other filled shapes 
it's possible to use a C<fill> instead of a color.

=item flood_fill

You can fill a region that all has the same color using the
flood_fill() method, for example:

  $img->flood_fill(x=>50, y=>50, color=>$color);

will fill all regions the same color connected to the point (50, 50).

You can also fill with a complex fill:

  $img->flood_fill(x=>50, y=>50, fill=>{ hatch=>'cross1x1' });

=item setpixel and getpixel

  $img->setpixel(x=>50, y=>70, color=>$color);
  $img->setpixel(x=>[ 50, 60, 70 ], y=>[20, 30, 40], color=>$color);
  my $color = $img->getpixel(x=>50, y=>70);
  my @colors = $img->getpixel(x=>[ 50, 60, 70 ], y=>[20, 30, 40]);

setpixel() is used to set one or more individual pixels, and
getpixel() to retrieve the same.

For either method you can supply a single set of co-ordinates as
scalar x and y parameters, or set each to an arrayref of ordinates.

When called with arrays, getpixel() will return a list of colors in
list context, and an arrayref in scalar context.

To receive floating point colors from getpixel, set the C<type>
parameter to 'float'.

=item setscanline

Set all or part of a horizontal line of pixels to an image.  This
method is most useful in conjuction with L</getscanline>.

The parameters you can pass are:

=over

=item *

y - vertical position of the scanline.  This parameter is required.

=item *

x - position to start on the scanline.  Default: 0

=item *

pixels - either a reference to an array containing Imager::Color
objects, an reference to an array containing Imager::Color::Float
objects or a scalar containing packed color data.

See L</"Packed Color Data"> for information on the format of packed
color data.

=item *

type - the type of pixel data supplied.  If you supply an array
reference of object then this is determined automatically.  If you
supply packed color data this defaults to '8bit', if your data is
packed floating point color data then set this to 'float'.

You can use float or 8bit samples with any image.

=back

Returns the number of pixels set.

Each of the following sets 5 pixels from (5, 10) through (9, 10) to
blue, red, blue, red, blue:

  my $red_color = Imager::Color->new(255, 0, 0);
  my $blue_color = Imager::Color->new(0, 0, 255);

  $image->setscanline(y=>10, x=>5, pixels=>
                      [ ($blue_color, $red_color) x 2, $blue_color ]);

  # use floating point color instead, for 16-bit plus images
  my $red_colorf = Imager::Color::Float->new(1.0, 0, 0);
  my $blue_colorf = Imager::Color::Float->new(0, 0, 1.0);

  $image->setscanline(y=>10, x=>5, pixels=>
                      [ ($blue_colorf, $red_colorf) x 2, $blue_colorf ]);

  # packed 8-bit data
  $image->setscanline(y=>10, x=>5, pixels=>
                      pack("C*", ((0, 0, 255, 255), (255, 0, 0, 255)) x 2,
                            (0, 0, 255, 255)));

  # packed floating point samples
  $image->setscanline(y=>10, x=>5, type=>'float', pixels=>
                      pack("d*", ((0, 0, 1.0, 1.0), (1.0, 0, 0, 1.0)) x 2,
                            (0, 0, 1.0, 1.0)));


Copy even rows from one image to another:

  for (my $y = 0; $y < $im2->getheight; $y+=2) {
    $im1->setscanline(y=>$y,
                      pixels=>scalar($im2->getscanline(y=>$y)));
  }


Set the blue channel to 0 for all pixels in an image.  This could be
done with convert too:

  for my $y (0..$im->getheight-1) {
    my $row = $im->getscanline(y=>$y);
    $row =~ s/(..).(.)/$1\0$2/gs;
    $im->setscanline(y=>$y, pixels=>$row);
  }

=item getscanline

Read all or part of a horizonatal line of pixels from an image.  This
method is most useful in conjunction with L</setscanline>.

The parameters you can pass are:

=over

=item *

y - vertical position of the scanline.  This parameter is required.

=item *

x - position to start on the scanline.  Default: 0

=item *

width - number of pixels to read.  Default: $img->getwidth - x

=item *

type - the type of pixel data to return.  Default: C<8bit>.

Permited values are C<8bit> and C<float>.

=back

In list context this method will return a list of Imager::Color
objects when I<type> is C<8bit>, or a list of Imager::Color::Float
objects when I<type> if C<float>.

In scalar context this returns a packed 8-bit pixels when I<type> is
C<8bit>, or a list of packed floating point pixels when I<type> is
C<float>.

The values of samples for which the image does not have channels is
undefined.  For example, for a single channel image the values of
channels 1 through 3 are undefined.

Check image for a given color:

  my $found;
  YLOOP: for my $y (0..$img->getheight-1) {
    my @colors = $img->getscanline(y=>$y);
    for my $color (@colors) {
      my ($red, $green, $blue, $alpha) = $color->rgba;
      if ($red == $test_red && $green == $test_green && $blue == $test_blue
          && $alpha == $test_alpha) {
        ++$found;
        last YLOOP;
      }
    }
  }

Or do it using packed data:

  my $found;
  my $test_packed = pack("CCCC", $test_red, $test_green, $test_blue, 
                         $test_alpha);
  YLOOP: for my $y (0..$img->getheight-1) {
    my $colors = $img->getscanline(y=>$y);
    while (length $colors) {
      if (substr($colors, 0, 4, '') eq $test_packed) {
        ++$found;
        last YLOOP;
      }
    }
  }

Some of the examples for L</setscanline> for more examples.

=item getsamples

Read specified channels from all or part of a horizontal line of
pixels from an image.

The parameters you can pass are:

=over

=item *

y - vertical position of the scanline.  This parameter is required.

=item *

x - position to start on the scanline.  Default: 0

=item *

width - number of pixels to read.  Default: $img->getwidth - x

=item *

type - the type of sample data to return.  Default: C<8bit>.

Permited values are C<8bit> and C<float>.

=item *

channels - a reference to an array of channels to return, where 0 is
the first channel.  Default: C< [ 0 .. $self->getchannels()-1 ] >

=back

In list context this will return a list of integers between 0 and 255
inclusive when I<type> is C<8bit>, or a list of floating point numbers
between 0.0 and 1.0 inclusive when I<type> is C<float>.

In scalar context this will return a string of packed bytes, as with
C< pack("C*", ...) > when I<type> is C<8bit> or a string of packed
doubles as with C< pack("d*", ...) > when I<type> is C<float>.

Example: Check if any pixels in an image have a non-zero alpha
channel:

  my $has_coverage;
  for my $y (0 .. $img->getheight()-1) {
    my $alpha = $img->getsamples(y=>$y, channels=>[0]);
    if ($alpha =~ /[^\0]/) {
      ++$has_coverage;
      last;
    }
  }

Example: Convert a 2 channel grey image into a 4 channel RGBA image:

  # this could be done with convert() instead
  my $out = Imager->new(xsize => $src->getwidth(), 
                        ysize => $src->getheight(),
                        channels => 4);
  for my $y ( 0 .. $src->getheight()-1 ) {
    my $data = $src->getsamples(y=>$y, channels=>[ 0, 0, 0, 1 ]);
    $out->setscanline(y=>$y, pixels=>$data);
  }

=back

=head1 Packed Color Data

The getscanline() and setscanline() functions can work with pixels
packed into scalars.  This is useful to remove the cost of creating
color objects, but should only be used when performance is an issue.

Packed data can either be 1 byte per sample or 1 double per sample.

Each pixel returned by getscanline() or supplied to setscanline()
contains 4 samples, even if the image has fewer then 4 channels.  The
values of the extra samples as returned by getscanline() is not
specified.  The extra samples passed to setscanline() are ignored.

To produce packed 1 byte/sample pixels, use the pack C<C> template:

  my $packed_8bit_pixel = pack("CCCC", $red, $blue, $green, $alpha);

To produce packed double/sample pixels, use the pack C<d> template:

  my $packed_float_pixel = pack("dddd", $red, $blue, $green, $alpha);

=head1 BUGS

box, arc, do not support antialiasing yet.  Arc, is only filled as of
yet.  Default color is not unified yet.

=head1 SEE ALSO

Imager(3), Imager::Cookbook(3)

=cut
